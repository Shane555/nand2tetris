


// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   //x part
   And16(a= x, b = false, out = w1);
   Mux16(a = x, b = w1, sel = zx, out = w2);
   Not16(in = w2, out = notw2);
   Mux16(a = w2, b = notw2, sel = nx, out = w3);

   //y part
   And16(a= y, b = false, out = w4);
   Mux16(a = y, b = w4, sel = zy, out = w5);
   Not16(in = w5, out = notw5);
   Mux16(a = w5, b = notw5, sel = ny, out = w6);
  
  //function of x,y
  And16( a = w3, b =w6, out = w7);
  Add16( a = w3, b = w6, out = w8);
  Mux16( a = w7, b = w8, sel = f, out = w9);
  
  //post-processing
  Not16( in = w9, out = w10);
  Mux16( a = w9, b = w10, sel = no, out[15] = w11, out[0..7] = w12, out[8..15] = w13);
  Or8Way( in = w12, out = final1);
  Or8Way( in = w13, out = final2);
  Or( a= final1, b = final2, out = final3);
  Not( in = final3, out = zr);
  And(a = w11, b =true, out =ng);
}